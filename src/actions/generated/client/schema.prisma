generator client {
  provider = "prisma-client-js"
  output   = "../actions/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Stores user-created bookmark categories, supporting nesting and public sharing.
model Category {
  /// Unique identifier for the category.
  id     String @id @default(uuid())
  /// Owner of the category.
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// Name of the category.
  name     String
  /// Parent category ID for nesting. NULL for top-level categories.
  parentId String?   @map("parent_id")
  parent   Category? @relation("SubCategories", fields: [parentId], references: [id], onDelete: SetNull) // If parent is deleted, subcategories become top-level

  /// Sub-categories under this category.
  subCategories Category[] @relation("SubCategories")

  /// True if the category (and its bookmarks) can be publicly viewed.
  isPublic     Boolean @default(false) @map("is_public")
  /// Optional order for displaying categories at the same level.
  displayOrder Int?    @map("display_order")

  /// Timestamp of when the category was created.
  createdAt DateTime @default(now()) @map("created_at")
  /// Timestamp of the last update to the category.
  updatedAt DateTime @updatedAt @map("updated_at")

  /// Bookmarks within this category.
  bookmarks Bookmark[]

  @@index([userId], name: "idx_categories_user_id")
  @@index([parentId], name: "idx_categories_parent_id")
  @@map("categories") // Maps this model to the 'categories' table
}

/// Stores individual bookmarked websites.
model Bookmark {
  /// Unique identifier for the bookmark.
  id     String @id @default(uuid())
  /// Owner of the bookmark.
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// Category this bookmark belongs to. Cascades on delete if category is deleted.
  categoryId String?   @map("category_id")
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  /// Title of the bookmarked site.
  title           String
  /// The actual URL of the bookmarked site.
  url             String
  /// Optional description for the bookmark.
  description     String?
  /// Optional URL to the site's favicon.
  faviconUrl      String? @map("favicon_url")
  /// Optional URL to the site's OpenGraph image.
  ogImageUrl      String? @map("og_image_url")
  /// Extracted domain name from the URL, for display or filtering.
  domainName      String? @map("domain_name")
  /// Optional order for displaying bookmarks within a category.
  displayOrder    Int?    @map("display_order")
  /// Optional reading progress percentage (e.g. for articles, books).
  readingProgress Int?    @default(0) @map("reading_progress")

  /// Timestamp of when the bookmark was created.
  createdAt DateTime @default(now()) @map("created_at")
  /// Timestamp of the last update to the bookmark.
  updatedAt DateTime @updatedAt @map("updated_at")
  // If you want to strictly prevent a user from adding the exact same URL twice:
  // @@unique([userId, url], name: "unique_user_url")

  @@index([userId], name: "idx_bookmarks_user_id")
  @@index([categoryId], name: "idx_bookmarks_category_id")
  @@index([userId, url], name: "idx_bookmarks_user_url") // For checking duplicates per user
  @@map("bookmarks") // Maps this model to the 'bookmarks' table
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  /// Categories created by the user.
  categories Category[]
  /// Bookmarks saved by the user.
  bookmarks  Bookmark[]
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}
